#+TITLE: Zig-emacs
#+DATE: 2023-12-24T12:27:53+0800
#+LASTMOD: 2025-05-01T10:26:29+0800
#+OPTIONS: toc:nil num:nil

[[https://github.com/jiacai2050/zig-emacs/actions/workflows/ci.yml][https://github.com/jiacai2050/zig-emacs/actions/workflows/ci.yml/badge.svg]]
[[https://github.com/jiacai2050/zig-emacs/actions/workflows/lisp-ci.yml][https://github.com/jiacai2050/zig-emacs/actions/workflows/lisp-ci.yml/badge.svg]]

Zig binding for Emacs's [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Writing-Dynamic-Modules.html][dynamic modules]].

=zig-emacs= only support [[https://ziglang.org/download/][Zig 0.14]], any contribution is welcome. ⚒️
* Example
#+begin_src zig
const std = @import("std");
const emacs = @import("emacs");

// Every module needs to call `module_init` in order to register with Emacs.
comptime {
    emacs.module_init(@This());
}

fn add(e: emacs.Env, v1: emacs.Value, v2: emacs.Value) emacs.Value {
    const a = e.extractInteger(v1);
    const b = e.extractInteger(v2);
    return e.makeInteger(a + b);
}

// Emacs dynamic module entrypoint
pub fn init(env: emacs.Env) c_int {
    env.defineFunc(
        "zig-add",
        add,
        // This make `zig-add` interactive.
        .{ .interactive_spec = "nFirst number: \nnSecond number: " },
    );

    return 0;
}
#+end_src
Compile [[file:example.zig][this example]] with ~zig build~, then load it into Emacs.
#+BEGIN_SRC emacs-lisp

(module-load (expand-file-name "zig-out/lib/libzig-example.dylib"))
(zig-greeting "Jiacai")
#+END_SRC
If everything is OK, you should see our greeting message in minibuffer.

[[file:screenshot.jpg]]

* Usage
=zig-emacs= support [[https://ziglang.org/download/0.11.0/release-notes.html#Package-Management][package manager]] introduced in Zig 0.11.

#+begin_src bash
zig fetch --save=emacs https://github.com/jiacai2050/zig-emacs/archive/${COMMIT}.tar.gz
#+end_src

Replace ~${COMMIT}~ with a real one.
* License
[[./LICENSE][MIT]]
